// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: jwtsvc.proto

package jwtsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JWT_GenerateToken_FullMethodName = "/jwt.JWT/GenerateToken"
	JWT_ValidateToken_FullMethodName = "/jwt.JWT/ValidateToken"
	JWT_GenerateLink_FullMethodName  = "/jwt.JWT/GenerateLink"
)

// JWTClient is the client API for JWT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JWTClient interface {
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	GenerateLink(ctx context.Context, in *GenerateLinkRequest, opts ...grpc.CallOption) (*GenerateLinkResponse, error)
}

type jWTClient struct {
	cc grpc.ClientConnInterface
}

func NewJWTClient(cc grpc.ClientConnInterface) JWTClient {
	return &jWTClient{cc}
}

func (c *jWTClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, JWT_GenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, JWT_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTClient) GenerateLink(ctx context.Context, in *GenerateLinkRequest, opts ...grpc.CallOption) (*GenerateLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateLinkResponse)
	err := c.cc.Invoke(ctx, JWT_GenerateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTServer is the server API for JWT service.
// All implementations must embed UnimplementedJWTServer
// for forward compatibility.
type JWTServer interface {
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	GenerateLink(context.Context, *GenerateLinkRequest) (*GenerateLinkResponse, error)
	mustEmbedUnimplementedJWTServer()
}

// UnimplementedJWTServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJWTServer struct{}

func (UnimplementedJWTServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedJWTServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedJWTServer) GenerateLink(context.Context, *GenerateLinkRequest) (*GenerateLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLink not implemented")
}
func (UnimplementedJWTServer) mustEmbedUnimplementedJWTServer() {}
func (UnimplementedJWTServer) testEmbeddedByValue()             {}

// UnsafeJWTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JWTServer will
// result in compilation errors.
type UnsafeJWTServer interface {
	mustEmbedUnimplementedJWTServer()
}

func RegisterJWTServer(s grpc.ServiceRegistrar, srv JWTServer) {
	// If the following call pancis, it indicates UnimplementedJWTServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JWT_ServiceDesc, srv)
}

func _JWT_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JWT_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWT_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JWT_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWT_GenerateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).GenerateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JWT_GenerateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).GenerateLink(ctx, req.(*GenerateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JWT_ServiceDesc is the grpc.ServiceDesc for JWT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JWT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jwt.JWT",
	HandlerType: (*JWTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _JWT_GenerateToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _JWT_ValidateToken_Handler,
		},
		{
			MethodName: "GenerateLink",
			Handler:    _JWT_GenerateLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jwtsvc.proto",
}
