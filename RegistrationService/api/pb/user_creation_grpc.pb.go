// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user_creation.proto

package regv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserCreation_Register_FullMethodName       = "/registration.UserCreation/Register"
	UserCreation_ConfrimAccount_FullMethodName = "/registration.UserCreation/ConfrimAccount"
)

// UserCreationClient is the client API for UserCreation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCreationClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	ConfrimAccount(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error)
}

type userCreationClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCreationClient(cc grpc.ClientConnInterface) UserCreationClient {
	return &userCreationClient{cc}
}

func (c *userCreationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, UserCreation_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCreationClient) ConfrimAccount(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, UserCreation_ConfrimAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCreationServer is the server API for UserCreation service.
// All implementations must embed UnimplementedUserCreationServer
// for forward compatibility.
type UserCreationServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	ConfrimAccount(context.Context, *ConfirmRequest) (*ConfirmResponse, error)
	mustEmbedUnimplementedUserCreationServer()
}

// UnimplementedUserCreationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserCreationServer struct{}

func (UnimplementedUserCreationServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserCreationServer) ConfrimAccount(context.Context, *ConfirmRequest) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfrimAccount not implemented")
}
func (UnimplementedUserCreationServer) mustEmbedUnimplementedUserCreationServer() {}
func (UnimplementedUserCreationServer) testEmbeddedByValue()                      {}

// UnsafeUserCreationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCreationServer will
// result in compilation errors.
type UnsafeUserCreationServer interface {
	mustEmbedUnimplementedUserCreationServer()
}

func RegisterUserCreationServer(s grpc.ServiceRegistrar, srv UserCreationServer) {
	// If the following call pancis, it indicates UnimplementedUserCreationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserCreation_ServiceDesc, srv)
}

func _UserCreation_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCreationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCreation_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCreationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCreation_ConfrimAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCreationServer).ConfrimAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCreation_ConfrimAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCreationServer).ConfrimAccount(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCreation_ServiceDesc is the grpc.ServiceDesc for UserCreation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCreation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registration.UserCreation",
	HandlerType: (*UserCreationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserCreation_Register_Handler,
		},
		{
			MethodName: "ConfrimAccount",
			Handler:    _UserCreation_ConfrimAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_creation.proto",
}
